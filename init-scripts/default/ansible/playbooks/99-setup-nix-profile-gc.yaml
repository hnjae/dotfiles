- name: Setup Nix Profile GC systemd user service & timer
  hosts: localhost
  become: false
  vars:
    xdg_config_home: "{{ ansible_env.XDG_CONFIG_HOME | default(ansible_env.HOME + '/.config') }}"
    systemd_path: "{{ xdg_config_home }}/systemd/user"
    service_name: nix-profile-gc
    gc_age: 1d
  tasks:
    - name: Check if nix exists in PATH
      command: "which nix"
      register: nix_check
      failed_when: false
      changed_when: false
    - name: Set nix_bin fact
      set_fact:
        nix_bin: "{{ nix_check.stdout }}"
    - name: Setup systemd service and timer
      when:
        - ansible_system == "Linux"
        - ansible_service_mgr == "systemd"
        - nix_check.rc == 0 and (nix_check.stdout | length > 0)
      block:
        - name: Ensure systemd user directory exists
          file:
            path: "{{ systemd_path }}"
            state: directory
            mode: '0755'
        - name: Deploy service unit
          copy:
            dest: "{{ systemd_path }}/{{ service_name }}.service"
            content: |
              [Unit]
              Description=Wipe old Nix profiles

              [Service]
              Type=oneshot
              ExecStart={{ nix_bin }} profile wipe-history --older-than {{ gc_age }}
            mode: '0644'
          notify: Reload systemd user daemon
        - name: Deploy timer unit
          copy:
            dest: "{{ systemd_path }}/{{ service_name }}.timer"
            content: |
              [Unit]
              Description=Wipe old Nix profiles

              [Timer]
              OnCalendar=*-*-* 04:00:00
              Persistent=true
              RandomizedDelaySec=1h

              [Install]
              WantedBy=timers.target
            mode: '0644'
          notify: Reload systemd user daemon
        - name: Flash handlers
          meta: flush_handlers
        - name: Enable & start timer
          systemd:
            name: "{{ service_name }}.timer"
            enabled: true
            state: started
            scope: user
  handlers:
    - name: Reload systemd user daemon
      systemd:
        daemon_reload: true
        scope: user
