---
- name: Verify existence of `op` and if user is logged into 1Password
  failed_when: false
  changed_when: false
  register: op_verify
  ansible.builtin.shell: |
    set -eu
    if ! command -v op >/dev/null 2>&1; then
      echo "Error: op is not installed" >&2
      exit 1
    fi
    op_list="$(op account list)"
    if [ "$op_list" = "" ]; then
      echo "Error: No 1Password account found. Please log in to your account first" >&2
      exit 1
    fi
  args:
    executable: /bin/sh
- name: Deploy various secrets from 1Password
  when: [op_verify.rc == 0]
  block:
    - name: Deploy age key from 1Password
      vars:
        age_key_path: '{{ xdg_config_home }}/sops/age/keys.txt'
      block:
        - name: Ensure age directory exists
          file:
            path: '{{ xdg_config_home }}/sops/age'
            state: directory
            mode: '0700'
        - name: Fetch age key from 1Password and write to file
          ansible.builtin.copy:
            dest: '{{ age_key_path }}'
            content: "{{ lookup('community.general.onepassword', 'ssh-home', section='age', field='private-key', vault='Personal') }}"
            mode: '0600'
          no_log: true
    - name: Deploy age key from 1Password
      block:
        - name: Fetch OpenRouter API key from system secrets
          ansible.builtin.command: secret-tool lookup api openrouter
          failed_when: false
          changed_when: false
          register: openrouter_api_key_system
          no_log: true
        - name: Fetch OpenRouter API key from 1Password
          ansible.builtin.set_fact:
            # Store the fetched secret in a variable for the next task.
            openrouter_api_key: "{{ lookup('community.general.onepassword', 'openrouter-local', field='credential' vault='Personal' ) }}"
            # Cache the fact for subsequent plays in the same ansible-playbook run.
            cacheable: true
          no_log: true
        - name: Store OpenRouter API key using secret-tool
          ansible.builtin.shell:
            cmd: secret-tool store --label=openrouter-local api openrouter
            stdin: '{{ openrouter_api_key }}'
          no_log: false
          changed_when: openrouter_api_key_system.stdout != openrouter_api_key
