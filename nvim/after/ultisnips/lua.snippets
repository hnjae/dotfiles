# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet alias "alias annotation"
---@alias ${1:<name>} ${2:<type>}
endsnippet

snippet an-alias "alias annotation"
---@alias ${1:<name>} ${2:<type>}
endsnippet

snippet param "param annotation"
---@param ${1:<name[?]>} ${2:<type[|type...]>} ${3:[description]}
endsnippet

snippet an-param "param annotation"
---@param ${1:<name[?]>} ${2:<type[|type...]>} ${3:[description]}
endsnippet

snippet an-return "return annotation"
---@return ${1:<type>} ${2:[<name> [comment] | [name] #<comment>]}
endsnippet

snippet return "return annotation"
---@return ${1:<type>} ${2:[<name> [comment] | [name] #<comment>]}
endsnippet

snippet ty "@type $0"
---@type $0
endsnippet

snippet type "@type $0"
---@type $0
endsnippet

snippet typ "@type $0"
---@type $0
endsnippet

snippet array
---@type ${1:<type>}[]$0
endsnippet

snippet typearray
---@type ${1:<type>}[]$0
endsnippet

snippet typefunc
---@type fun(${2:<arg>}: ${3:<arg type>}): ${1:<return type>}
endsnippet

snippet table
---@type table<$1, $2>$0
endsnippet

snippet typetable
---@type table<$1, $2>$0
endsnippet

snippet cl "Create a class"
${1:className} = {}

$1.${2:new} = function($3)
	local ${4:varName} = ${5:value}

	${6: --code}

	return $4
end
endsnippet

snippet elseif
elseif ${1:true} then
	$0
endsnippet

snippet for "for loop range"
for ${1:i}=${2:1},${3:10} do
	$0
end
endsnippet

snippet fori "enumerate table"
for ${3:i}, ${2:x} in ipairs(${1:table}) do
	$0
end
endsnippet

snippet forp "iter table (key, val)"
for ${3:key}, ${2:val} in pairs(${1:table}) do
	$0
end
endsnippet

snippet forline "read file line by line"
f = io.open(${1:"${2:filename}"}, "${3:r}")

while true do
	line = f:read()
	if line == nil then break end

	${0:-- code}
end
endsnippet

snippet func
function ${1:name}($2)
	${0:-- code}
end
endsnippet

snippet fun
function ${1:name}($2)
	${0:-- code}
end
endsnippet

snippet fu
function ${1:name}($2)
	${0:-- code}
end
endsnippet

snippet fux
function (${1:arg})
	${0:-- code}
end
endsnippet

snippet funcx
function (${1:arg})
	${0:-- code}
end
endsnippet

snippet funx
function (${1:arg})
	${0:-- code}
end
endsnippet

snippet if
if ${1:true} then
	$0
end
endsnippet

snippet f=
---@return ${3:return-type}
local ${1:name} = function($2)
	${0:-- code}
end
endsnippet

snippet loc "create a variable"
local $0
endsnippet

snippet loca "create a variable"
local $0
endsnippet

snippet l "create a variable"
local $0
endsnippet

snippet lo "create a variable"
local $0
endsnippet

snippet locpca "Protect call a function as a variable"
local ${1:status}, ${2:err_or_value} = pcall(${3:function})
endsnippet

snippet lp "Protect call a function as a variable"
local ${1:status}, ${2:err_or_value} = pcall(${3:function})
endsnippet

snippet localpcall "Protect call a function as a variable"
local ${1:status}, ${2:err_or_value} = pcall(${3:function})
endsnippet

snippet lv "create a local variable"
local ${1:varName} = ${0:value}
endsnippet

snippet locpcamo "Protect call a function as a variable"
local is_${1:module_name}, ${1:module_name} = pcall(require, "${1:module_name}")
endsnippet

snippet lreq "Require module as a variable"
local ${1:var} = require("${2:module}")
endsnippet

snippet pca "Protect call a function"
pcall(${1:function})
endsnippet

snippet p
print($0)
endsnippet

snippet req "Require module"
require("${1:module}")
endsnippet

snippet rt "return value"
return $0
endsnippet

snippet self:
function self:${1:methodName}($2)
	$0
end
endsnippet

snippet while
while ${1:true} do
	$0
end
endsnippet
