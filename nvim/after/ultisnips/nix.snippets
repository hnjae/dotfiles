# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet llconcat "concatLists :: [List] -> []"
builtins.concatLists [$0]
endsnippet

snippet lib.lists.concatLists "concatLists :: [List] -> []"
builtins.concatLists [$0]
endsnippet

snippet be "return `true` if a value ouccurs in the list."
builtins.elem ${1:value} ${0:list}
endsnippet

snippet elem "return `true` if a value ouccurs in the list."
builtins.elem ${1:value} ${0:list}
endsnippet

snippet bh ""
builtins.hasAttr ${1:attr} ${0:attrset}
endsnippet

snippet hasattr ""
builtins.hasAttr ${1:attr} ${0:attrset}
endsnippet

snippet lib.strings.readFile "readFile :: Path -> String"
builtins.readFile ${0:path}
endsnippet

snippet lsreadfile "readFile :: Path -> String"
builtins.readFile ${0:path}
endsnippet

snippet builtins.readFile "readFile :: Path -> String"
builtins.readFile ${0:path}
endsnippet

snippet readFile "readFile :: Path -> String"
builtins.readFile ${0:path}
endsnippet

snippet concatss "concatStringsSep :: string -> [string] -> string"
builtins.concatStringsSep "$1" [$0]
endsnippet

snippet lib.strings.concatStringsSep "concatStringsSep :: string -> [string] -> string"
builtins.concatStringsSep "$1" [$0]
endsnippet

snippet builtins.concatStringsSep "concatStringsSep :: string -> [string] -> string"
builtins.concatStringsSep "$1" [$0]
endsnippet

snippet lsc "concatStringsSep :: string -> [string] -> string"
builtins.concatStringsSep "$1" [$0]
endsnippet

snippet imp ""
imports = [
	$0
];
endsnippet

snippet im ""
imports = [
	$0
];
endsnippet

snippet inp "installPhase in stdenv.mkDerivation"
installPhase = ''
	$0
'';
endsnippet

snippet lafilter "filterAttrs :: (String -> Any -> Bool) -> AttrSet -> AttrSet"
lib.attrsets.filterAttrs (n: v: $1) $0 
endsnippet

snippet lib.attrsets.filterAttrs "filterAttrs :: (String -> Any -> Bool) -> AttrSet -> AttrSet"
lib.attrsets.filterAttrs (n: v: $1) $0 
endsnippet

snippet lam "mergeAttrsList :: [ Attrs ] -> Attrs"
lib.attrsets.mergeAttrsList [ ${0:AttrSets}] 
endsnippet

snippet lib.attrsets.mergeAttrsList "mergeAttrsList :: [ Attrs ] -> Attrs"
lib.attrsets.mergeAttrsList [ ${0:AttrSets}] 
endsnippet

snippet lib.attrsets.optionalAttrs "optionalAttrs :: Bool -> AttrSet -> AttrSet"
lib.attrsets.optionalAttrs ${1:bool} ${0:AttrSet}
endsnippet

snippet optionalAttrs "optionalAttrs :: Bool -> AttrSet -> AttrSet"
lib.attrsets.optionalAttrs ${1:bool} ${0:AttrSet}
endsnippet

snippet lao "optionalAttrs :: Bool -> AttrSet -> AttrSet"
lib.attrsets.optionalAttrs ${1:bool} ${0:AttrSet}
endsnippet

snippet llcount "optional :: bool -> a -> [a]"
lib.lists.count ${0:list}
endsnippet

snippet lib.lists.count "optional :: bool -> a -> [a]"
lib.lists.count ${0:list}
endsnippet

snippet llo "optional :: bool -> a -> [a]"
lib.lists.optional ${1:bool} ${0:single-entry}
endsnippet

snippet liblistsoptionals "optional :: bool -> a -> [a]"
lib.lists.optional ${1:bool} ${0:single-entry}
endsnippet

snippet liblistsoptionals "optionals :: bool -> [a] -> [a]"
lib.lists.optional ${1:bool} [${0:list}]
endsnippet

snippet llos "optionals :: bool -> [a] -> [a]"
lib.lists.optional ${1:bool} [${0:list}]
endsnippet

snippet llr "remove :: a -> [a] -> [a]"
lib.lists.remove ${1:entry} [${0:list}]
endsnippet

snippet lmo ""
lib.mkOverride ${1:priority(1000)} ${0:value}
endsnippet

snippet mkOverride ""
lib.mkOverride ${1:priority(1000)} ${0:value}
endsnippet

snippet ne
{...}: {
	$0
}
endsnippet

snippet new
{...}: {
	$0
}
endsnippet
