snippet asf
async function ${1:name}(${2:arguments}) {
	$0
}
endsnippet

snippet af
(${1:arguments}) => $0
endsnippet

snippet afr
(${1:arguments}) => {
	return $0
}
endsnippet

snippet asaf
async (${1:arguments}) => {
	$0
}
endsnippet

snippet asm
async ${1:name}(${2:arguments}): Promise<${3:returnType}> {
	$0
}
endsnippet

snippet catch "Catch Statement"
catch (${1:error}) {
	$0
}
endsnippet

snippet cls "Class Definition"
class ${1:name} {
	$0
}
endsnippet

snippet class "Class Definition"
class ${1:name} {
	$0
}
endsnippet

snippet else "(If-)Else Statement"
else {

}
endsnippet

snippet if "If Statement"
if (${1:condition}) {
	$0
}
endsnippet

snippet ifelse "If-Else Statement"
if (${1:condition}) {
	$0
} else {

}
endsnippet

snippet imp* "이렇게 해야 lsp가 module 명을 알려주는듯?"
import * as $1 from '${2:module}';$3
endsnippet

snippet im* "이렇게 해야 lsp가 module 명을 알려주는듯?"
import * as $1 from '${2:module}';$3
endsnippet

snippet imp "Import external module."
import ${2:*} from '${1:module}';$3
endsnippet

snippet im "Import external module."
import ${2:*} from '${1:module}';$3
endsnippet

snippet imc "Import external module."
import { $2 } from '${1:module}';$3
endsnippet

snippet impc "Import external module."
import { $2 } from '${1:module}';$3
endsnippet

snippet impt "Import external module."
import type {$2} from '${1:module}';$3
endsnippet

snippet imt "Import external module."
import type {$2} from '${1:module}';$3
endsnippet

snippet int "Interface Definition"
interface ${1:name} {
	$0
}
endsnippet

snippet interface "Interface Definition"
interface ${1:name} {
	$0
}
endsnippet

snippet iface "Interface Definition"
interface ${1:name} {
	$0
}
endsnippet

snippet meth "Method Definition"
${1:name}(${2:arguments})${3:return type} {
	$0
}
endsnippet

snippet method "Method Definition"
${1:name}(${2:arguments})${3:return type} {
	$0
}
endsnippet

snippet trycatch "Try-Catch Statement"
try {
	$0
} catch (${1:error}) {

}
endsnippet

snippet cas "case"
case ${1:'constant-expression'}: {
	$0
	break;
}
endsnippet

snippet err "Log error to the console"
console.error($1);
$0
endsnippet

snippet log "Log to the console"
console.log($1);$0
endsnippet

snippet warn "Log warning to the console"
console.warn($1);
$0
endsnippet

snippet cf
const ${1:name} = (${2:arguments}) => {
	return $0
}
endsnippet

snippet ca
const ${1:name} = await ${2:value}
endsnippet

snippet cda
const { ${1:name} } = await ${2:value}
endsnippet

snippet c
const ${1:name}
endsnippet

snippet cad
const [ ${2:prop} ] = ${1:value}
endsnippet

snippet cd
const { ${2:prop} } = ${1:value}
endsnippet

snippet exp
export $0
endsnippet

snippet ex
export $0
endsnippet

snippet expo
export $0
endsnippet

snippet export
export $0
endsnippet

snippet expor
export $0
endsnippet

snippet newp "new Promise<type>()"
new Promise<${1:type}>((resolve, reject) => {
	$0
})
endsnippet

snippet pro "new Promise<type>()"
new Promise<${1:type}>((resolve, reject) => {
	$0
})
endsnippet

snippet req ""
require($1)$0
endsnippet

snippet swi "switch"
switch (${1:'expression'}) {
	$0
	default: {
		${2:'statement'};
		break;
	}
}
endsnippet

snippet onsubm "onSubmit for <form>"
const onSubmit = useCallback(
	(e: FormEvent<HTMLFormElement>) => {
		e.preventDefault()
		$0
	},
	[$1],
)
endsnippet

snippet troot ""
const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement)
endsnippet

snippet usecallbac "react - useCallback"
useCallback(($1) => {
	$0
}, [$2])
endsnippet

snippet usestat ""
const [$1, set$2] = useState<${3:type}>(${4:init value})$0
endsnippet

snippet for "for"
for (let i = 0; i < $1; i++) {
	$0
}
endsnippet

snippet foreach "Array.prototype.forEach"
forEach(${0:callable})
endsnippet

snippet map "Array.prototype.map()"
map(${0:callable})
endsnippet

snippet reduce "Array.prototype.reduce()"
reduce(${0:callback}, ${1:[, initialValue]})
endsnippet

snippet forof "for...of (iterate element(values) of object)"
for (const ${2:element} of ${1:object}) {
	$0console.log($2) // prints values:
}
endsnippet

snippet forin "for...in (iterate property(key) of object)"
for (const ${2:property} in ${1:object}) {
	$0console.log($2)
}
endsnippet
