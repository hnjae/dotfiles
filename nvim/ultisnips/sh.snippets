snippet envp "this is POSIX script"
#!/bin/sh
endsnippet

snippet envb "this is bash script"
#!/usr/bin/env bash
endsnippet

snippet arrb "bash array"
(
	$0
)
endsnippet

snippet confirm "confirm user"
confirm() {
	echo "Are you sure? [YES/Any]: \c"
	read -r response
	case "\$response" in
	"YES")
		true
		;;
	*)
		false
		;;
	esac
}$0
endsnippet

snippet confirmbash "confirm user"
confirm() {
	read -n 1 -r -p "Are you sure? [y/Any]" response
	case "\$response" in
	[yY])
		true
		;;
	*)
		false
		;;
	esac
}$0
endsnippet

snippet forarrb "loop array (bash)"
for ${2:name} in "\${${1:array_name}[@]}"; do
	${0:echo} "\${$2}"
done
endsnippet

snippet for "for loop (POSIX)"
for ${2:name} in var1 var2 var3; do
	${0:echo} "\${$2}"
done
endsnippet

snippet forc "for loop of output (POSIX)"
for ${2:name} in $(${3:echo a b c}); do
	${0:echo} "\${$2}"
done
endsnippet

snippet fori "fori (bash)"
for ${1:i} in {${2:start}..${3:end (included)}..${4:step (optional)}}; do
   $0echo "Welcome \$$1 times"
done
endsnippet

snippet whilei "POSIX way of iterating number"
${1:i}=${2:start}
while [ "$i" -lt ${3:stop} ]; do
	$0echo "\${$1}"
	$1=$((\$$1 + ${4:step}))
done
unset "\$$1"
endsnippet


snippet dir "It will NOT resolve path. It will NOT WORK if script is being sourced."
$0"\$(cd -- "\$(dirname -- "$0")" && pwd -P)" >/dev/null 2>&1
endsnippet

snippet scriptdir "It will NOT resolve path. It will NOT WORK if script is being sourced."
$0"\$(cd -- "\$(dirname -- "$0")" && pwd -P)" >/dev/null 2>&1
endsnippet

snippet sete "exit when error occur"
set -e
endsnippet

snippet va "use var"
"${$1}"
endsnippet

snippet filename "get filename without path"
"$(basename -- "${$1}")"
endsnippet

snippet filestem "get stem from path"
$0="${filename%.*}"
endsnippet
