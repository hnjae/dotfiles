{
  "ter": {
    "prefix": "ter",
    "description": "\"ternary operator\"",
    "body": "${1:true-value} if ${2:condition} else \"${3:false-value}\""
  },
  "ia": {
    "prefix": "ia",
    "description": "\"from __future__ import annotations\"",
    "body": "from __future__ import annotations"
  },
  "sb": {
    "prefix": "sb",
    "description": "\"Adds shebang line for default python interpreter.\"",
    "body": [
      "#!/usr/bin/env python3",
      "$0"
    ]
  },
  "de": {
    "prefix": "de",
    "body": [
      "def ${1:function_name}($2) -> ${3:None}:",
      "\t${0:pass}"
    ]
  },
  "docf": {
    "prefix": "docf",
    "description": "RST Style docstring",
    "body": [
      "\"\"\"",
      "$0",
      ":param arg1 int: description",
      ":raises ValueError: description",
      ":return: description",
      ":rtype: bool",
      "",
      ":example:",
      ">>> a=1",
      ">>> fucn_name(a)",
      "True",
      "\"\"\""
    ]
  },
  "doc": {
    "prefix": "doc",
    "description": "Oneline docstring",
    "body": "\"\"\"$0.\"\"\""
  },
  "fori": {
    "prefix": "fori",
    "body": [
      "for $2 in $1:",
      "\t${0:pass}"
    ]
  },
  "if": {
    "prefix": "if",
    "body": [
      "if ${1:condition}:",
      "\t${0:pass}"
    ]
  },
  "ifm": {
    "prefix": "ifm",
    "description": "\"Create implicitly all the code at the top level using the __name__ special variable.'",
    "body": [
      "if __name__ == \"__main__\":",
      "\t${1:main()}$0"
    ]
  },
  "ignore": {
    "prefix": "ignore",
    "description": "noqa",
    "body": "# noqa: ${0:rule-name}"
  },
  "noqa": {
    "prefix": "noqa",
    "description": "noqa",
    "body": "# noqa: ${0:rule-name}"
  },
  "im": {
    "prefix": "im",
    "description": "\"Import a package or module'",
    "body": "import ${1:package/module}$0"
  },
  "fim": {
    "prefix": "fim",
    "description": "\"Import statement that allows individual objects from the module to be imported directly into the callerâ€™s symbol table.\"",
    "body": "from ${1:package/module} import ${2:names}"
  },
  "iso8601": {
    "prefix": "iso8601",
    "description": "use with strftime",
    "body": "%Y%m%dT%H%M%S%z"
  },
  "localtime": {
    "prefix": "localtime",
    "body": "datetime.now(tz=timezone.utc).astimezone()"
  },
  "localtimeinsec": {
    "prefix": "localtimeinsec",
    "body": "datetime.now(tz=timezone.utc).replace(microsecond=0).astimezone()"
  },
  "timeinsec": {
    "prefix": "timeinsec",
    "body": "datetime.now(tz=timezone.utc).replace(microsecond=0)"
  },
  "time": {
    "prefix": "time",
    "body": "datetime.now(tz=timezone.utc)"
  },
  "today": {
    "prefix": "today",
    "description": "\"UTC today\"",
    "body": "datetime.now(tz=datetime.UTC).date()"
  },
  "slogConfig": {
    "prefix": "slogConfig",
    "description": "\"logging\"",
    "body": [
      "logging.basicConfig(",
      "\tlevel=logging.INFO,",
      "\tformat=\"%(asctime)s %(levelname)s: %(message)s\",",
      "\tdatefmt=\"%Y-%m-%dT%H:%M:%S%z\",",
      ")",
      "logger = logging.getLogger(__name__)"
    ]
  },
  "log": {
    "prefix": "log",
    "description": "\"log\"",
    "body": "logger.info(\"${0:msg}: %s\")"
  },
  "tpc": {
    "prefix": "tpc",
    "description": "\"TYPE_CHECKING\"",
    "body": [
      "from typing import TYPE_CHECKING",
      "",
      "if TYPE_CHECKING:",
      "\t${0:pass}"
    ]
  }
}
