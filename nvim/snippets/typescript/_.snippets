snippet fun "function"
	function ${1:name}(${2:arguments}) {
		$0
	}
snippet asf
	async function ${1:name}(${2:arguments}) {
		$0
	}
snippet af
	(${1:arguments}) => $0
snippet afr
	(${1:arguments}) => {
		return $0
	}
snippet asa
	async (${1:arguments}) => {
		$0
	}
snippet asm
	async ${1:name}(${2:arguments}): Promise<${3:returnType}> {
		$0
	}
snippet a
	await $0
snippet catch Catch Statement
	catch (${1:error}) {
		$0
	}
snippet cls Class Definition
	class ${1:name} {
		$0
	}
snippet class Class Definition
	class ${1:name} {
		$0
	}
snippet else (If-)Else Statement
	else {
		$0
	}
snippet elif Else-if Statement
	else if (${1:true}) {
		$0
	}
snippet if If Statement
	if (${1:condition}) {
		$0
	}
snippet ifelse If-Else Statement
	if (${1:condition}) {
		$0
	} else {

	}
# 이렇게 해야 lsp가 module 명을 알려주는듯?
snippet im "import"
	import '${1:module}';$0
snippet im* "import as"
	import * as $1 from '${2:module}';$3
snippet imc "import {}"
	import { $2 } from '${1:module}';$3
snippet imt "import type {}"
	import type {$2} from '${1:module}';$3
snippet iface Interface Definition
	interface ${1:name} {
		$0
	}
snippet meth Method Definition
	${1:name}(${2:arguments})${3:return type} {
		$0
	}
snippet method Method Definition
	${1:name}(${2:arguments})${3:return type} {
		$0
	}
snippet trycatch Try-Catch Statement
	try {
		$0
	} catch (${1:error}) {

	}
snippet cas case
	case ${1:'constant-expression'}: {
		$0
		break;
	}
snippet err Log error to the console
	console.error($1);
	$0
snippet log Log to the console
	console.log($1);$0
snippet warn Log warning to the console
	console.warn($1);
	$0
snippet cf
	const ${1:name} = (${2:arguments}) => {
		return $0
	}
snippet ca
	const ${1:name} = await ${2:value}
snippet cda
	const { ${1:name} } = await ${2:value}
snippet c
	const ${1:name}
snippet cad
	const [ ${2:prop} ] = ${1:value}
snippet cd
	const { ${2:prop} } = ${1:value}
snippet e
	export $0
snippet newp new Promise<type>()
	new Promise<${1:type}>((resolve, reject) => {
		$0
	})
snippet pro new Promise<type>()
	new Promise<${1:type}>((resolve, reject) => {
		$0
	})
snippet req
	require($1)$0
snippet swi switch
	switch (${1:'expression'}) {
		$0
		default: {
			${2:'statement'};
			break;
		}
	}
snippet onsubm onSubmit for <form>
	const onSubmit = useCallback(
		(e: FormEvent<HTMLFormElement>) => {
			e.preventDefault()
			$0
		},
		[$1],
	)
snippet troot
	const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement)
snippet usecallbac react - useCallback
	useCallback(($1) => {
		$0
	}, [$2])
snippet usestat
	const [$1, set$2] = useState<${3:type}>(${4:init value})$0
snippet for for
	for (let i = 0; i < $1; i++) {
		$0
	}
snippet forof for...of (iterate element(values) of object)
	for (const ${2:element} of ${1:object}) {
		$0console.log($2) // prints values:
	}
snippet forin for...in (iterate property(key) of object)
	for (const ${2:property} in ${1:object}) {
		$0console.log($2)
	}
