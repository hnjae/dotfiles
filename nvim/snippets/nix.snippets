# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet if if-then-else
	if (${1:true}) then ($2) else ($3)
snippet llconcat concatLists :: [List] -> []
	builtins.concatLists [$0]
snippet lib.lists.concatLists concatLists :: [List] -> []
	builtins.concatLists [$0]
snippet be return `true` if a value ouccurs in the list.
	builtins.elem ${1:value} ${0:list}
snippet elem return `true` if a value ouccurs in the list.
	builtins.elem ${1:value} ${0:list}
snippet bh 
	builtins.hasAttr ${1:attr} ${0:attrset}
snippet hasattr 
	builtins.hasAttr ${1:attr} ${0:attrset}
snippet lib.strings.readFile readFile :: Path -> String
	builtins.readFile ${0:path}
snippet lsreadfile readFile :: Path -> String
	builtins.readFile ${0:path}
snippet builtins.readFile readFile :: Path -> String
	builtins.readFile ${0:path}
snippet readFile readFile :: Path -> String
	builtins.readFile ${0:path}
snippet concatss concatStringsSep :: string -> [string] -> string
	builtins.concatStringsSep "$1" [$0]
snippet lib.strings.concatStringsSep concatStringsSep :: string -> [string] -> string
	builtins.concatStringsSep "$1" [$0]
snippet builtins.concatStringsSep concatStringsSep :: string -> [string] -> string
	builtins.concatStringsSep "$1" [$0]
snippet lsc concatStringsSep :: string -> [string] -> string
	builtins.concatStringsSep "$1" [$0]
snippet imp 
	imports = [
		$0
	];
snippet im 
	imports = [
		$0
	];
snippet inp installPhase in stdenv.mkDerivation
	installPhase = ''
		$0
	'';
snippet lafilter filterAttrs :: (String -> Any -> Bool) -> AttrSet -> AttrSet
	lib.attrsets.filterAttrs (n: v: $1) $0
snippet lib.attrsets.filterAttrs filterAttrs :: (String -> Any -> Bool) -> AttrSet -> AttrSet
	lib.attrsets.filterAttrs (n: v: $1) $0
snippet lam mergeAttrsList :: [ Attrs ] -> Attrs
	lib.attrsets.mergeAttrsList [ ${0:AttrSets}]
snippet lib.attrsets.mergeAttrsList mergeAttrsList :: [ Attrs ] -> Attrs
	lib.attrsets.mergeAttrsList [ ${0:AttrSets}]
snippet lib.attrsets.optionalAttrs optionalAttrs :: Bool -> AttrSet -> AttrSet
	lib.attrsets.optionalAttrs ${1:bool} ${0:AttrSet}
snippet optionalAttrs optionalAttrs :: Bool -> AttrSet -> AttrSet
	lib.attrsets.optionalAttrs ${1:bool} ${0:AttrSet}
snippet lao optionalAttrs :: Bool -> AttrSet -> AttrSet
	lib.attrsets.optionalAttrs ${1:bool} ${0:AttrSet}
snippet llcount optional :: bool -> a -> [a]
	lib.lists.count ${0:list}
snippet lib.lists.count optional :: bool -> a -> [a]
	lib.lists.count ${0:list}
snippet llo optional :: bool -> a -> [a]
	lib.lists.optional ${1:bool} ${0:single-entry}
snippet liblistsoptionals optional :: bool -> a -> [a]
	lib.lists.optional ${1:bool} ${0:single-entry}
snippet liblistsoptionals optionals :: bool -> [a] -> [a]
	lib.lists.optional ${1:bool} [${0:list}]
snippet llos optionals :: bool -> [a] -> [a]
	lib.lists.optional ${1:bool} [${0:list}]
snippet llr remove :: a -> [a] -> [a]
	lib.lists.remove ${1:entry} [${0:list}]
snippet lmo 
	lib.mkOverride ${1:priority(1000)} ${0:value}
snippet mkOverride 
	lib.mkOverride ${1:priority(1000)} ${0:value}
snippet ne
	{...}: {
		$0
	}
snippet new
	{...}: {
		$0
	}
