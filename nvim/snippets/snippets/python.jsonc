{
  "#!/usr/bin/env python3": {
    "prefix": [
      "env"
    ],
    "body": "#!/usr/bin/env python3\n$0",
    "description": "Adds shebang line for default python interpreter."
  },
  "def": {
    "prefix": "de",
    "body": "def ${1:function_name}($2) -> {$3:None}:\n\t${0:pass}",
    "description": ""
  },
  "if": {
    "prefix": "if",
    "body": "if ${1:condition}:\n\t",
    "description": ""
  },
  "for-in": {
    "prefix": "fori",
    "body": "for ${2} in ${1}:\n\t${0}",
    "description": ""
  },
  "if __name__ == \"__main__\"": {
    "prefix": "ifm",
    "body": "if __name__ == \"__main__\":\n\t${1:main()}$0",
    "description": "Create implicitly all the code at the top level using the __name__ special variable."
  },
  "import": {
    "prefix": "im",
    "body": "import ${1:package/module}$0",
    "description": "Import a package or module"
  },
  "from ... import ...": {
    "prefix": "fim",
    "body": "from ${1:package/module} import ${2:names}$0",
    "description": "Import statement that allows individual objects from the module to be imported directly into the callerâ€™s symbol table."
  },
  "docstring-short": {
    "prefix": "doc",
    "body": [
      "\"\"\"${0}.\"\"\""
    ],
    "description": "Oneline docstring"
  },
  "docstring-full": {
    "prefix": "docf",
    "body": [
      "\"\"\"",
      "$0",
      ":param arg1 int: description",
      ":raises ValueError: description",
      ":return: description",
      ":rtype: bool",
      "",
      ":example:",
      ">>> a=1",
      ">>> fucn_name(a)",
      "True",
      "\"\"\""
    ],
    "description": "RST Style docstring"
  },
  "ignore-rule-entire-file": {
    "prefix": [
      "ignore-entire"
    ],
    "body": [
      "# ruff: noqa: ${0:rule-name}"
    ],
    "description": "noqa"
  },
  "ignore-rule": {
    "prefix": [
      "noqa",
      "ignore"
    ],
    "body": [
      "# noqa: ${0:rule-name}"
    ],
    "description": "noqa"
  },
  "iso8601_compact": {
    "prefix": "iso8601",
    "body": [
      "%Y%m%dT%H%M%S%z"
    ],
    "description": "use with strftime"
  },
  "timenow": {
    "prefix": "time",
    "body": [
      "datetime.now(timezone.utc)"
    ],
    "description": ""
  },
  "timeinsec": {
    "prefix": "timeinsec",
    "body": [
      "datetime.now(timezone.utc).replace(microsecond=0)"
    ],
    "description": ""
  },
  "localtime": {
    "prefix": "localtime",
    "body": [
      "datetime.now(timezone.utc).astimezone()"
    ],
    "description": ""
  },
  "localtimeinsec": {
    "prefix": "localtimeinsec",
    "body": [
      "datetime.now(timezone.utc).replace(microsecond=0).astimezone()"
    ],
    "description": ""
  }
}
