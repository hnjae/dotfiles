---
- name: Check if op exists in PATH
  command: which op
  register: op_check
  failed_when: false
  changed_when: false
- name: Progress if op is installed
  when: [op_check.rc == 0]
  block:
    - name: Check if user is logged into 1Password
      changed_when: false
      register: op_verify
      ansible.builtin.shell: |
        set -eu
        op_list="$(op account list)"
        if [ "$op_list" = "" ]; then
          echo "Error: No 1Password account found. Please log in to your account first" >&2
          exit 1
        fi
      args:
        executable: /bin/sh
    - name: Deploy various secrets from 1Password
      when: [op_verify.rc == 0]
      no_log: true
      block:
        - name: Deploy age key from 1Password
          vars:
            age_key_path: '{{ xdg_config_home }}/sops/age/keys.txt'
          no_log: true
          block:
            - name: Ensure age directory exists
              file:
                path: '{{ xdg_config_home }}/sops/age'
                state: directory
                mode: '0700'
            - name: Fetch age key from 1Password and write to file
              ansible.builtin.copy:
                dest: '{{ age_key_path }}'
                content: "{{ lookup('community.general.onepassword', 'ssh-home', section='age', field='private-key', vault='Personal') }}"
                mode: '0600'
        - name: Deploy OpenRouter key from 1Password
          no_log: true
          block:
            - name: Fetch OpenRouter API key from system secrets
              ansible.builtin.command:
                cmd: secret-tool lookup api openrouter
              failed_when: false
              changed_when: false
              register: openrouter_api_key_system
            - name: Fetch OpenRouter API key from 1Password
              ansible.builtin.set_fact:
                openrouter_api_key: "{{ lookup('community.general.onepassword', 'openrouter-local', field='credential', vault='Personal' ) }}"
                cacheable: false
            - name: Store OpenRouter API key using secret-tool
              ansible.builtin.command:
                cmd: secret-tool store --label=openrouter-local api openrouter
                stdin: '{{ openrouter_api_key }}'
              changed_when: openrouter_api_key_system.stdout != openrouter_api_key
        - name: Deploy Gemini key from 1Password
          no_log: true
          block:
            - name: Fetch Gemini API key from system secrets
              ansible.builtin.command:
                cmd: secret-tool lookup api gemini
              failed_when: false
              changed_when: false
              register: gemini_api_key_system
            - name: Fetch Gemini API key from 1Password
              ansible.builtin.set_fact:
                openrouter_api_key: "{{ lookup('community.general.onepassword', 'gemini-local', field='credential', vault='Personal' ) }}"
                cacheable: false
            - name: Store OpenRouter API key using secret-tool
              ansible.builtin.command:
                cmd: secret-tool store --label=gemini-local api gemini
                stdin: '{{ openrouter_api_key }}'
              changed_when: openrouter_api_key_system.stdout != openrouter_api_key
      always:
        - name: Clear sensitive variables from Ansible facts
          ansible.builtin.set_fact:
          # Overwrite the variables with 'None' (null) to remove their content.
            openrouter_api_key: None
            openrouter_api_key_system: None
            gemini_api_key: None
            gemini_api_key_system: None
          no_log: true
